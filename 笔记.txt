1：webpack打包之后是一个文件
    (npx webpack默认执行webpack.config.js)
    (npx webpack --config webpack.react.js)
    (试用npx会检查node_modules，试用npm不会，npm是执行package内定义指令)
    1）自执行函数
    2）参数通过对象形式传递的
        key：文件路径，value是一个函数
        eval：执行字符串代码
        如果有多个依赖文件，最终打包为一个文件
    3）怎么把多个文件打包为一个文件，通过__webpack_require__模仿require
    4）通过递归方式，不停的调用自己
2：webpack优化
    打包：体积更小，速度更快
    自带优化：
        tree-sharking: 依赖关系的解析，不用的代码不打包，生产环境才会有效
        scope-hoisting：作用域提升，变量，结果 不会打包到代码中
    自己实现的优化：
        速度：
            happypack: 多线程打包
              注意：体积比较小，打包的时候，比较慢

        体积：
            moment：时间插件 引入 很多语言包不需要的
            IgnorePlugin就会把不需要的语言包删掉

            html cdn 地址 jquery
            npm i jquery
            打包的时候，打包到压缩文件中，体积爆炸
            externals: {//不打包

            }
            modules：{

            }
        打包完体积过大 20M 10M
            拆：公共的文件  react/react-dom/vue
            引入了react-dom等，内存会很大，
            动态链接库
                一些想要提取出来的包，react/react-dom
                单独放到一个包，可以放到cdn上，
                定义了webpack.react.js的webpack文件,产生动态链接库
            webpack.config中引用动态链接，用webpack.DllReferencePlugin插件
            这样打包的文件内存就会小很多

    代码优雅程度
        autoprefixer: 加载前缀
3:eslint配置，在外部加eslintrc文件，或许package中加eslintConfig配置,用来检查js语法的工具。
    本项目eslint配置有问题，webpack配置报错，配置在package中的如下参考
    // "eslintConfig": {
  //   "extends": "airbnb-base",
  //   "env": {
  //     "browser": true
  //   }
  // },

4:webpack-dev-server自动化打包，改动代码自动更新打包文件，创建服务

5:生产模式
不需要devServer，只需要打包输出

6:package
browserslist是配置浏览器兼容的，webpack中的postcss可以配合使用兼容css

7:高级webpack
提升开发体验，生成map后缀文件
    sourceMap：cheap-module-source-map打包速度快，只有行映射，source-map打包速度慢，保护行/列映射
修改代码，自动打包，只重新打包改动模块的
    HotModuleReplacement:在devServer的hot启动，修改代码，整个页面不会刷新，只会改动修改模块。
oneOf
    对文件指定一个loader，不指定，所有loader都会作用于文件。 
缓存Eslint和babel
    eslint在插件配置cache和cacheLocation的缓存。babel在loader中配置cacheDirectory和cacheCompression配置缓存和缓存文件的压缩。
多进程打包thread-loader
    每个进程都有启动时间，谨慎使用。在需要使用的地方使用thread-loader就可以，必须放在其他loader之前。定义Worker进程数量
    os.cpus().length可以返回CPU核数，可以使用最大进程数,压缩js的插件设置parallel开启多进程。eslint检查加入参数threads数量
    多进程在文件少的时候不建议，可能更慢
减少代码提及
    treeshaked:webpack默认存在的，清理未使用的代码。
    babel为每个编译的代码插入辅助代码，使用babel的runtime插件，不定义辅助代码，在需要时候引入使用。
    压缩图片，有损和无损
运行性能优化
    分割代码，多入口，当需要使用哪一个页面，只执行那个打包js文件，不用执行全部打包js，splitChunks配置 
    多次引入的文件单独打包到一个组中，使用splitChunks和cacheGroups配合
    按需加载：js的import按需加载，webpack会单独打包出一个文件，配置了splitChunks的
    preload/prefetch:在浏览器空闲时候加载资源，不执行，有缓存。preload告诉浏览器立即加载，prefetch告诉浏览器空闲时候加载
    @vue/preload-webpack-plugin插件可以实现
    network-cache:由于文件互相引用，一个文件改变了，打包时候就会导致另外一个文件也重新打包。所以使用这个方法，创建一个cache文件存放
    文件互相引用的关联信息文件，当一个文件改变了，引用她的文件没变，只是改变这个关联的cache文件。optimization中配置runTimeChunk